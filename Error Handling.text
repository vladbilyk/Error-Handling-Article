Варианты обработки ошибок
=========================

При разработке любого сервисного кода (т.е. кода, который будет вызываться
каким-либо другим кодом) рано или поздно возникает необходимость сообщать о
статусе выполнения операции: успешно ли она завершилась или неуспешно. Если в
случае успешного завершения, последовательность исполнения действий вызывающей
стороны не будет отклоняться от задуманной, то в случае неуспешного завершения
операции на вызывающей стороне часто требуются различные действия в зависимости
от причины провала вызванной операции (например, нотификация пользователя,
изменения состояния программы и т.д.).

Существуют два распространенных механизма уведомления/и обработки ошибок:

-   Механизм исключений (exceptions)

-   Использование кодов возврата

TODO: ссылки

TODO: Дать общие описания подходов.

TODO: Определить их отличия, и понять когда и что лучше применять.

TODO: (следующий раздел) Далее более детальное сравнение реализаций в разных
языках программирования.

Подходы к обработке ошибок
==========================

Идиомы обработки, принятые в разных языках и фреймворках.

-   Win32/C++ (WTL, MFC)

-   не-UI C/C++ и всякие platform-abstraction layers типа APR, libuv.

-   Objective-C / Cocoa

    Методы, в которых возможны операционные ошибки, как правило, возвращают
    признак «успешно/неуспешно» и имеют последний параметр `(NSError**)error`, в
    который вызывающая сторона должна записать адрес указателя на объект
    `NSError`. Если ошибка возникла то в `error` будут подробности, в том числе
    код ошибки и локализованное описание. Простейший код отображения ошибки
    пользователю выглядит так.

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    NSError *error;
    if (![doc readFromData:data ofType:type error:&error]) {
      [NSApp presentError:error];
      return;
    }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Описание обработки ошибок в Objective-C:
    <https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ErrorHandlingCocoa/ErrorHandling/ErrorHandling.html>

-   C# / .NET Framework

    В .NET Framework и Common Language Runtime основным подходом к обработке
    ошибок является механизм исключений, который поддерживает работу как с
    управляемыми (managed), так и с неуправляемыми (unmanaged) исключениями
    универсальным образом. CLR определяет универсальную модель исключений,
    которая немного варьируется между спецификацими CLR-совместимых языков
    [^clr-exceptions].

    [^clr-exceptions] Handling and Throwing Exceptions
    <http://msdn.microsoft.com/en-US/library/5b2yeyab(v=vs.110).aspx>

    Про обработку исключений можно писать долго, она очень похожа на C++ и Java.
    Из специфических вещей в C# есть оператор using, гарантирующий вызов метода
    `Dispose` при выходе за границу оператора (обеспечивая таким образом
    освобождение ресурсов)[^cs-using-st].

    [^cs-using-st] using Statement (C# Reference)
    <http://msdn.microsoft.com/en-us/library/yh598w02.aspx>

    Повсеместное использование исключений может приводить к снижению
    производительности, поэтому Microsoft рекомендует использовать 2 похожих
    паттерна в критических для производительности случаях
    [^exc-performance-guidelines-msdn]: Tester-Doer и TryX метод.

    [^exc-performance-guidelines-msdn] Exceptions and Performance. Design
    Guidelines for Developing Class Libraries.
    <http://msdn.microsoft.com/en-US/library/ms229009(v=vs.100).aspx>

    Идея паттерна Tester-Doer состоит в том, чтобы к методу выполняющему
    некоторое действие (Do), и бросающему исключение в случае неудачи,
    обеспечить проверку (потокобезопасную) сообщающую будет ли действие (Do)
    успешным. Так, например, индексер класса `Dictionary<TKey, TValue>` бросает
    исключение `KeyNotFoundException`, если соответсвующий ключ в коллекции не
    найден, а метод `ContainsKey` осуществляет проверку наличия ключа.

    Метод `Dictionary<TKey, TValue>.TryGetValue` со следующим прототипом:

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    bool TryGetValue(TKey key, out TValue value);
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Если коллекция содержит ключ `key`, то метод `TryGetValue` возвращает `true`
    и записывает в параметер `value `соответствующее значение, а в противном
    случае возвращает `false`. Данный метод является примером шаблона TryX
    метод.

-   Java

    В языке Java cуществует два типа исключений ​​[^thinking-in-java​​]:
    проверяемые (checked) и непроверяемые (unchecked).

    [^​​thinking-in-java]​​​​ Bruce Eckel, Thinking in Java (4th Edition), 2006.

    Проверяемыми являются все исключения, унаследованные от класса `Exception`
    (т.е. все исключения в Java по умолчанию - проверяемые). Проверяемые
    исключения, бросаемые методом должны быть перечислены в сигнатуре метода
    (проверяется компилятором) с помощью ключевого слова `throws`:

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    void f() throws TooBig, TooSmall, DivZero
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Компилятор отвечает за то, что все проверяемые исключения обрабатываются в
    программе.

    Непроверяемыми являются исключения наследуемые от класса `RuntimeException`.
    На непроверяемые исключения не налагаются ограничения проверяемых исключений
    (т.е. их обработка не проверяется компилятором).

-   JavaScript

    В асинхронном коде принято передавать первым параметром в колбэк объект
    ошибки (или `null` если нет ошибки). Например, так.

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    function async_divide(a, b, callback) {
      if (b === 0)
        callback(new Error('Cannot divide by zero'));
      callback(null, a / b);
    }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   Erlang

-   Eiffel

    В Eiffel используются своеобразный подход к исключениям, называемый
    дисциплинированными исключениями (disciplined exceptions)
    [^disc-exceptions].

    [^disc-exceptions] Bertrand Meyer. Disciplined Exceptions. Interactive
    Software Engineering, 1988.

    Этот подход подразумевает, что исключения должны использоваться только в
    ненормальных ситуациях, которые могут приводить непредсказуемому поведению
    системы. Бросание и обработка исключений реализуется в соответствии с
    принципом разработки по контракту (Design by Contract), являющимся
    основополагающим в Eiffel. Исключения бросаются при невыполнении контракта
    (предусловия и постусловия), или из тела функции. Обрабатываются исключения
    в специальном блоке `rescue` из которого вызывается повторное выполнение
    функции (или происходит очистка ресурсов и проброс исключения на уровень
    выше). Пример:

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    get_integer_from_user: INTEGER is  
      -- Read an integer (allow user up to five attempts)  
    local  
      failed: INTEGER
    do 
      Result := getint
    rescue 
      failed := failed+1; 
      if failed <= 5 then 
        message ("Input must be an integer. Please enter again:");
        retry 
      end; 
    end -- get_integer_from_user
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   Common Lisp

    Common Lisp представляет широкий набор средств для обработки ошибок,
    базирующихся на системе условий (condition system) встроенной в язык.
    Обработка исключений в Common Lisp по-сути, частный случай использования
    системы условий, включающий в себя три сущности: сигнализацию (signaling)
    условия, обработку (handling) условия и перезапуск (restarting). Условия
    (conditions) можно рассматривать как некоторые события о состоянии
    программы. При возникновении некоторого специфичного состояния - условия,
    например, возникновения ошибки, мы сигнализируем о нем стандартным или
    некоторым переопределенным способом. Обработчик условия - это часть
    программы, которая некоторым образом может отреагировать на сигнал условия.
    Обычно обработчики условия устанавливаются в верхнеуровневых функциях (вверх
    по стеку вызовов, по сравнению с местом, где произошло условие). Перезапуски
    позволяют вернуться к месту возникновения условия (ошибки). Таким образом
    обеспечивается возможность выбора стратегии обработки условия на высшем
    уровне с возвратом к месту возникновения условия. Такой подход имеет гораздо
    большую гибкость по сравнению с механизмом обработки исключений, в котором
    обработчик исключения в верхнеуровневой функции не имеет возможности
    возврата в вызываемые функции.

    Ниже приведен пример функции `parse-log-file` с установленным перезапуском
    `skip-log-entry`.

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    (defun parse-log-file (file)
       (with-open-file (in file :direction :input)
          (loop for text = (read-line in nil nil) while text
              for entry = (restart-case (parse-log-entry text)
                             (skip-log-entry () nil))
              when entry collect it)))
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Функция `parse-log-entry`, вызываемая из `parse-log-file`, при возникновении
    ошибки сигнализирует условием `malformed-log-entry-error`. Но функция
    `parse-log-file` не содержит обработчика для `malformed-log-entry-error`,
    предполагая, что он будет добавлен в верхнеуровневой функции:

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    (defun analyze-log (log)
        (handler-bind ((malformed-log-entry-error
                        #'(lambda (c)
                            (invoke-restart 'skip-log-entry))))   
            (dolist (entry (parse-log-file log))
                (analyse-entry entry))))
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Подробно обработка ошибок и система условий описана в книге [^practical-cl].

    [^practical-cl] Peter Seibel, Practical Common Lisp. APress, 2005.

-   Haskel?

-   Go

    В Go основной механизм—возврат объекта с описанием ошибки. Для удобства
    возврата одновременно полезного значения и ошибки, в языке поддерживается
    возврат набора значений из метода.

    Базовый тип ошибки содержит только строку, но можно унаследовать свой тип и
    передавать в нём дополнительную информацию.

    При возникновении ошибки рекомендуется сразу делать возврат из метода. Чтобы
    при этом все взятые ресурсы были корректно освобождены, в языке есть
    механизм “отложенного” (`defer`) выполнения.

    Кроме этого есть механизм `panic`/`recover` аналогичный исключениям. Его
    используется использовать только для программных ошибок или некорректных
    входных данных. При этом внешний API библиотек должен использовать только
    обычные ошибки, а все случаи “паники” должны перехватываться внутри.

-   Python, Ruby, Perl, PHP?

Сравнение и анализ
==================

Что лучше, удобнее.

Существует ли универсальная реализация?

Попробовать ее реализовать.

Мысли
=====

-   Интересная идея: возвращать объект с кодом ошибки, который бросает
    исключение если вызывающий код не спросил код ошибки—так сказать “Exploding
    Errors”. Отсюда из одного из комментариев:
    <http://damienkatz.net/2006/04/error_code_vs_e.html>
