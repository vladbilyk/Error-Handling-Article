Варианты обработки ошибок
=========================

При разработке любого сервисного кода (т.е. кода, который будет вызываться
каким-либо другим кодом) рано или поздно возникает необходимость сообщать о
статусе выполнения операции: успешно ли она завершилась или неуспешно. Если в
случае успешного завершения, последовательность исполнения действий вызывающей
стороны не будет отклоняться от задуманной, то в случае неуспешного завершения
операции на вызывающей стороне часто требуются различные действия в зависимости
от причины провала вызванной операции (например, нотификация пользователя,
изменения состояния программы и т.д.).

Существую два распространенных механизма уведомления/и обработки ошибок:

-   Механизм исключений (exceptions)

-   Использование кодов возврата

TODO: ссылки

TODO: Дать общие описания подходов.

TODO: Определить их отличия, и понять когда и что лучше применять.

TODO: (следующий раздел) Далее более детальное сравнение реализаций в разных
языках программирования.

Подходы к обработке ошибок
==========================

Идиомы обработки, принятые в разных языках и фреймворках.

-   Win32/C++ (WTL, MFC)

-   не-UI C/C++ и всякие platform-abstraction layers типа APR, libuv.

-   Objective-C / Cocoa

-   C#

-   Java

-   JavaScript

-   Erlang

-   Haskel?

-   Go?

-   Python, Ruby, Perl, PHP?

// Ф: Взять для примера какую-нибудь задачу и реализовать её с красивой
обработкой ошибок на нескольких языках?

Сравнение и анализ
==================

Что лучше, удобнее.

Существует ли универсальная реализация?

Попробовать ее реализовать.
